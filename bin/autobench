#!/usr/bin/env ruby
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

################################################################################
# Really, Autobench was designed to be hooked up to test frameworks,
# however, here's a hacky/ugly script to run it via command line.
################################################################################

require 'optparse'
require 'benchmark'
require 'json'
require 'yaml'
require 'csv'
require 'autobench'

# opts
@quiet     = false
@format    = "json"
@resdir    = "/tmp"
options    = {}
benchmarks = {
  # defaults
  :render => true,
  :yslow  => true,
  :client => true
}
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: autobench [options]"

  opts.separator ""
  opts.separator "Required Arguments:"

  opts.on("-c", "--config FILENAME", "configuration file") do |p|
    options["config"] = p
  end

  opts.separator ""
  opts.separator "Optional Arguments:"
  opts.separator ""
  opts.separator "  Note: server, port, uri and runs overide what's in"
  opts.separator "  your configuation file."
  opts.separator ""


  opts.on("-s", "--server SERVER", "target server") do |p|
    options["server"] = p
  end

  opts.on("-p", "--port PORT", Integer, "target port") do |p|
    options["port"] = p
  end

  opts.on("-u", "--uri URI", "target uri") do |p|
    options["uri"] = p
  end

  opts.on("-i", "--runs RUNS", Integer, "itterations against target") do |p|
    options["runs"] = p
  end

  opts.on("-f", "--format [json|yaml|csv]", "raw output format") do |p|
    @format = p
  end

  opts.on("-r", "--results [dirname]", "results directory (default: /tmp)") do |p|
    @resdir = File.expand_path(p)
  end

  opts.separator ""
  opts.separator "Module Exclusion:"
  opts.on("-R", "--without-render", "Do not include render (httperf).") do
    benchmarks[:render] = false
  end

  opts.on("-Y", "--without-yslow", "Do not include yslow (yslow.js).") do
    benchmarks[:yslow] = false
  end

  opts.on("-C", "--without-client", "Do not include client (phantomas).") do
    benchmarks[:client] = false
  end

  opts.separator ""
  opts.separator "Misc. Arguments:"
  opts.on("-q", "--quiet", "Print no things.") do
    @quiet = true
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
optparser.parse!

unless options.has_key?("config")
  puts optparser
  exit
end

def say msg
  unless @quiet
    puts msg
  end
end

# utils

def dump run
    outfile = File.join(@resdir, "autobench-#{run}-#{Time.now.to_i}.#{@format.gsub('yaml','yml')}")
    results = @autobench.send(run).full_results
    File.open(outfile, "w") do |f|
      case @format
      when "json"
        f.write(JSON.pretty_generate(results))
      when "yaml"
        f.write(results.to_yaml)
      when "csv"
        f.write(
          CSV.generate { |csv|
            csv << results.keys
            csv << results.values
          }
        )
      else
        raise "unknown format `#{@format}`, try `yaml`, `json` or `csv`"
        exit 556
      end
    end
    say "=> Raw results (#{@format}): #{outfile}"
end

def handle_results test_text, run, time_taken
  @total_time = @total_time + time_taken

  say "Ran #{test_text}"
  say "=> Duration: #{time_taken}"

  if @autobench.send(run).thresholds?
    say "=> Successes:"
    say @autobench.send(run).successes

    say "=> Failures:"
    say @autobench.send(run).failures

    if @autobench.send(run).passed?
      say "=> PASS!"
    else
      @exit_status = @exit_status + 1
      say "=> FAIL!"
    end
  end
  dump(run)
  say " "
end

# action
@autobench   = Autobench.new(options.delete("config"), options)
@exit_status = 0
@total_time  = 0

{ :render => "Render (httperf)",
  :yslow  => "YSlow (yslow.js)",
  :client => "Client (phantomas)"
}.each do |run, desc|
  if benchmarks[run]
    render_time = Benchmark.realtime do
      @autobench.send(run).benchmark
    end
    handle_results(desc, run, render_time)
  end
end

say "Complete!"
say "=> Duration: #{@total_time}"
say "=> #{(@exit_status == 0 ? "Success" : "Failure")}!"

exit @exit_status

# vim: ft=ruby
