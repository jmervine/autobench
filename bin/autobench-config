#!/usr/bin/env ruby
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

################################################################################
# Really, Autobench was designed to be hooked up to test frameworks,
# however, here's a hacky/ugly script to run it via command line.
################################################################################

require 'optparse'
require 'yaml'
require 'benchmark'
require 'autobench'

# opts
options    = {
  "server" => "localhost",
  "port"   => 80,
  "uri"    => "/",
  "runs"   => 9
}
benchmarks = {
  # defaults
  :render => true,
  :yslow  => true,
  :client => true
}
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: autobench-config [options]"

  opts.separator ""
  opts.separator "Required Arguments:"

  opts.on("-o", "--output FILENAME", "configuration output file") do |p|
    @output = p
  end

  opts.separator ""
  opts.separator "Optional Arguments:"
  opts.separator ""
  opts.separator "  Note: server, port, uri and runs overide defaults:"
  opts.separator "  - server: 'localhost'"
  opts.separator "  - port:   80"
  opts.separator "  - uri:    '/'"
  opts.separator "  - runs:   9"
  opts.separator ""


  opts.on("-s", "--server SERVER", "target server") do |p|
    options["server"] = p
  end

  opts.on("-p", "--port PORT", Integer, "target port") do |p|
    options["port"] = p
  end

  opts.on("-u", "--uri URI", "target uri") do |p|
    options["uri"] = p
  end

  opts.on("-i", "--runs RUNS", Integer, "itterations against target") do |p|
    options["runs"] = p
  end

  opts.separator ""
  opts.separator "Module Exclusion:"
  opts.on("-R", "--without-render", "Do not include render (httperf).") do
    benchmarks[:render] = false
  end

  opts.on("-Y", "--without-yslow", "Do not include yslow (yslow.js).") do
    benchmarks[:yslow] = false
  end

  opts.on("-C", "--without-client", "Do not include client (phantomas).") do
    benchmarks[:client] = false
  end

  opts.separator ""
  opts.separator "Misc. Arguments:"

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
optparser.parse!

unless defined?(@output)
  puts optparser
  exit
end

def say msg
  puts msg
end

# utils

def dump_data
    File.open(@output, "w") do |f|
      f.write(@data.to_yaml)
    end
    say "=> Results: #{@output}"
end

def handle_results test_text, run, time_taken
  @total_time = @total_time + time_taken

  say "Collected: data: #{test_text}"
  say "=> Duration: #{time_taken}"
  say " "

  @data["thresholds"][run.to_s] = @autobench.send(run).full_results

end

# action
@autobench   = Autobench.new(options)
@exit_status = 0
@total_time  = 0

@data = options.merge({
  "thresholds" => {
    "render"   => {},
    "yslow"    => {},
    "client"   => {}
  }
})

%w[ phantomjs node httperf ].each do |bin_name|
  if (bin_path = %x{which #{bin_name}}.strip) && bin_path != ""
    @data["paths"] ||= {}
    @data["paths"][bin_name] = bin_path
  else
    say "WARNING: #{bin_name} not found."
  end
end

{ :render => "Render (httperf)",
  :yslow  => "YSlow (yslow.js)",
  :client => "Client (phantomas)"
}.each do |run, desc|
  if benchmarks[run]
    render_time = Benchmark.realtime do
      @autobench.send(run).benchmark
    end
    handle_results(desc, run, render_time)
  end
end

dump_data

say "Complete!"
say "=> Duration: #{@total_time}"

exit

# vim: ft=ruby
